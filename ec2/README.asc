Swift cloud on Amazon Elastic Compute Cloud
-------------------------------------------

Sign up online
^^^^^^^^^^^^^^

Sign up for Amazon Web Services (AWS) and create an IAM user by following instructions
from http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html[Amazon's Setup Documentation].
From the documentation you would only need to do the following two steps:

1. http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#sign-up-for-aws[Sign up for AWS]

2. http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#create-an-iam-user[Create and IAM User]

NOTE: To create access keys, you must have permissions to perform the required
IAM actions. For more information, see http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html[Managing Credentials using IAM].

If you already have an account, here's the steps to get you IAM access keys:

1. Go to the IAM console.

2. From the navigation menu, click Users.

3. Select your IAM user name, or create a new one.

4. Click User Actions, and then click Manage Access Keys.

5. Click Create Access Key.

NOTE: Your keys will look something like this: +
Access key ID example    : AKIAIOSFODNN7*EXAMPLE* +
Secret access key example: wJalrXUtnFEMI/K7MDENG/bPxRfiCY*EXAMPLEKEY* +

6. Click Download Credentials, and store the keys (a .csv file) in a secure location.

NOTE: Your secret key will no longer be available through the AWS Management Console;
you will have the only copy. Keep it confidential in order to protect your account.

Setup local-machine
^^^^^^^^^^^^^^^^^^^

Install python and libcloud library. The following are steps for *debian* based
linux distributions such as *Ubuntu*.
[source,bash]
-----
sudo apt-get instal python python-libcloud
-----

If you machine has python and pip installed, you can install libcloud with *pip*:
[source,bash]
-----
# With super-user privileges do following
pip install apache-libcloud
-----

For *OSX*, do the following:
[source,bash]
-----
port install py-libcloud
-----

Get the swift-on-cloud repository from git
[source,bash]
-----
git clone git@github.com:yadudoc/swift-on-cloud.git
cd swift-on-cloud/aws
-----

Manage you Cloud resources
^^^^^^^^^^^^^^^^^^^^^^^^^^

Update the file swift-on-cloud/aws/configs in the cloned repository from the previous step,
with the following information:

 *  AWS_CREDENTIALS_FILE : Path to the credentials file downloaded in step 6 of _sign_up_online
 *  AWS_WORKER_COUNT : Use this to specify the number of worker instances required.
 *  AWS_KEYPAIR_NAME : Name of the keypair to use. If a keypair of this name does not exist, a keypair will be generated.
 *  AWS_KEYPAIR_FILE : Absolute path to the <keypair>.pem. If a keypair file of the specified name does not exist, a new one will be generated.
 *  AWS_USERNAME     : The username used for login to the cloud-instances. Set to the default "ubuntu" for an Ubuntu AMI. (ec2-user for Amazon linux AMI)
 *  AWS_REGION       : Default=us-west-2 | Do NOT change
 *  SECURITY_GROUP   : Default=swift_security_group1
 *  HEADNODE_IMAGE, WORKER_IMAGE : These are images used to boot up the headnode and workers.
 *  HEADNODE_MACHINE_TYPE, WORKER_MACHINE_TYPE : VM types for workers and the headnode. Choose between :
    - t2.<micro/small/medium>, m3.<medium,large,xlarge,2xlarge> :For general purpose computing
    - c3.<,x,2x,4x,8x>large             : Compute Optimised
    - g2.2xlarge                        : GPU Instances
    - r3.<,x,2x,4x,8x>large             : Memory Optimised
    - i2.<x,2x,4x,8x>large, hs1.8xlarge : Storage Optimised
 * WORKER_CONCURRENCY : Set number of tasks execute in parallel by each worker.

NOTE: Get details of instances and pricing http://aws.amazon.com/ec2/pricing[here]. The pricing varies
between geographical locations so make sure you check for US West Oregon, which is the default.

NOTE: AWS_WORKER_COUNT directly affects the cost. If you require more than 22 nodes including the
headnode, file a request to increase your resource quotas.

NOTE: Read more about AWS regions and availability zones http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html[here]

WARNING:  Do *NOT* change the images for the worker and headnode to point at images which have not
been explicitly setup with swift.

Start your cloud setup!
^^^^^^^^^^^^^^^^^^^^^^^

Once you finish editing the configs file with your preferences, start the cloud instances
by sourcing the setup script.

The setup script will setup firewall rules, copy over the required images and start a headnode
and the requested number of worker instances.

[source, bash]
-----
# Must source the setup script.
source setup.sh
-----

NOTE: Once your instances are started, you can monitor them from the Amazon Web services https://console.aws.amazon.com/ec2/v2/home?region=us-west-2#Instances:[Management Console]


Run the tutorial on the cloud
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Once your cloud resources have been configured and setup, you can run the swift-cloud-tutorial
directly from the cloud. The cloud resources created include a headnode, to which you would
connect to, and the several nodes in worker roles which would do computations in parallel.

To run the tutorial, first connect to the headnode:


[source, bash]
-----
# Connect to the Headnode
connect headnode
# This will have you logged in to the headnode on the cloud
-----

Run swift from your local machine
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now, once you've configured and started you cloud resources we can move on to trying the
swift-cloud-tutorial. To run the cloud tutorial from your local machine :

[source,bash]
-----
cd swift-on-cloud/swift-cloud-tutorial
source setup.sh
-----

NOTE: You must source the setup.sh script.

WARNING: Once the cloud instances are started, they start costing money. Remember to shut down
instances using the "dissolve" command.

Miscellanious operations supported:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

[source, bash]
-----
# Connect to the Headnode
connect headnode
-----

To see resources use :
[source, bash]
-----
list_resources
-----

To ssh to any resource listed :
[source, bash]
-----
# Specify the resource name as listed by list_resources here
# If resource_name is omitted, connect will try to connect to the
# headnode
connect <resource_name>
-----

To stop all resources use from your local machine. Please wait for a couple of minutes
for the command to finish. Confirm that all resources have been removed using
list_resources.  :
[source, bash]
-----
# This will delete the headnode as well as all workers.
# This command will take a few minutes to execute
dissolve
# Use list_resources to check if any resources still linger
list_resource
-----

To add more worker nodes use:
[source, bash]
-----
# The number of nodes you can create is limited by the quota's set by google.
# To increase quotas contact google using the change request form available
# under Your project / Compute engine / Quotas tab in developer console
start_n_more <Number of nodes>

# To remove worker nodes, use following command. If a number greater than the
# number of active workers is specified, all active workers will be deleted. No
# errors will be raised.
stop_n_workers <Number of workers>

# Alternatively update the configs with the total number of nodes you require
# and rerun the setup script
source setup.sh
-----

Note: To create your own customised images, you can connect to the swift instances (headnodes/workers) and
modify them. Once done you can create your own images. Documentation on Amazon Machine Images is available
http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html[here]
